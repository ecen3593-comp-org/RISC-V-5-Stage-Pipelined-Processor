/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_resources.codal
 *  """""""""""""""""""""""""""""
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "config.hcodal"

#define BOOLEAN_BIT     1    // Boolean control bit of width 1-bit
#define TWO_BIT         2       // Two bit wide control signal


pipeline pipe
{
    IF, ID, EX, ME, WB
};

// -------------------------------------------------------------------------------------------------
// Fetch stage
// -------------------------------------------------------------------------------------------------

signal bit[ADDR_W] s_if_nextpc;
signal bit[ADDR_W] s_if_pcin;

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

/* Decode stage pipeline registers */
register bit[ADDR_W]    r_id_pc            { pipeline = pipe.ID; }; // Pipelined PC register

/* Decode stage signals */
signal bit[INSTR_W]     s_id_instr;         // Instruction signal
/* Source Register Signals */
signal bit[RF_XPR_W]    s_id_rs1;           // Source register 1 signal
signal bit[RF_XPR_W]    s_id_rs2;           // Source register 2 signal
/* Destination Register Signals */
signal bit[RF_XPR_W]    s_id_rd;            // Destination register singal
/* Register File Read Output Signals */
signal bit[WORD_W]      s_id_reg1;          // Not used as of Phase 6
signal bit[WORD_W]      s_id_reg2;          // Not used as of Phase 6
/* Register file mux outputs (Phase 7) */
signal bit[RF_XPR_W]    s_id_src1;          // Register file mux output source 1
signal bit[RF_XPR_W]    s_id_src2;          // Register file mux output source 2
/* Register file select lines (Phase 6) */
signal bit[RFF1_W]      s_id_rff1_sel;      // Register file select line 1 signal
signal bit[RFF2_W]      s_id_rff2_sel;      // Register file select line 2 signal
/* Decoder control signals */
signal bit[OPC_W]       s_id_opc;           // Instruction opcode + func3 + func7
/* Decoder output signals */
signal bit[HALT_W]      s_id_halt;          // Halt signal
signal bit[ALUOP_W]     s_id_aluop;         // ALU operation signal
signal bit[SRC1_W]      s_id_alusrc1;       // ALU source 1 signal (Phase 7)
signal bit[SRC2_W]      s_id_alusrc2;       // ALU source 2 signal
signal bit[REGWRITE_W]  s_id_regwrite;      // Register Write enable signal
signal bit[BRANCH_W]    s_id_branchop;      // Branch operation signal (Phase 7)
signal bit[REGWRITE_W]  s_id_rfwt_sel;      // Register file write select signal (Phase 7)
signal bit[BRANCH_W]    s_id_branch_sel;    // Branch select seignal (Phase 7)
signal bit[IMMSEL_W]    s_id_immsel;        // Immediate select signal (Phase 7)
/* Immediate generator control signals */
signal bit[WORD_W]      s_id_immedi;        // Changed s_id_immed to s_id_immedi (Phase 7)
signal bit[WORD_W]      s_id_immedb;        // New IMMGEN control signal (Phase 7)
signal bit[WORD_W]      s_id_immedu;        // New IMMGEN control signal (Phase 7)
signal bit[WORD_W]      s_id_immedj;        // New IMMGEN control signal (Phase 7)
signal bit[WORD_W]      s_id_immeds;        // New IMMGEN control signal (Phase 7)
signal bit[WORD_W]      s_id_immed_out;     // New IMMGEN output signal (Phase 7)

// -------------------------------------------------------------------------------------------------
// Execute stage
// -------------------------------------------------------------------------------------------------

// Execute stage pipeline registers
/* Pipelined through to next phase */
register bit[ADDR_W]        r_ex_pc            	{ pipeline = pipe.EX; };    // Pipelined program counter register
register bit[INSTR_W]       r_ex_instr          { pipeline = pipe.EX; };    // Pipelined instruction register
register bit[RF_XPR_W]      r_ex_rd             { pipeline = pipe.EX; };    // Pipelined destination Register
/* Register File Select Registers (Phase 6) */
register bit[WORD_W]        r_ex_src1           { pipeline = pipe.EX; };    //
register bit[WORD_W]        r_ex_src2           { pipeline = pipe.EX; };    //
/* Registers pipelined into FWDCTRL block */
register bit[RF_XPR_W]      r_ex_rs1            { pipeline = pipe.EX; };    // Pipelined source register 1 (Phase 7)
register bit[RF_XPR_W]      r_ex_rs2            { pipeline = pipe.EX; };    // Pipelined source register 2 (Phase 7)
/* Decoder output registers */
register bit[ALUOP_W]       r_ex_aluop    		{ pipeline = pipe.EX; };    // Pipelined ALU operation register
register bit[SRC1_W]        r_ex_alusrc1        { pipeline = pipe.EX; };    // Pipelined ALU source 1 register (Phase 7)
register bit[SRC2_W]        r_ex_alusrc2        { pipeline = pipe.EX; };    // Pipelined ALU source 2 register (Phase 7)
register bit[REGWRITE_W]    r_ex_regwrite       { pipeline = pipe.EX; };    // Pipelined register file write enable register
register bit[HALT_W]        r_ex_halt           { pipeline = pipe.EX; };    // Pipelined halt register
register bit[BRANCH_W]      r_ex_brnchop        { pipeline = pipe.EX; };    // Pipelined branch operation register (Phase 7)
register bit[REGWRITE_W]    r_ex_rfwt_sel       { pipeline = pipe.EX; };    // Pipelined register file select register (Phase 7)
register bit[BRANCH_W]      r_ex_branchsel      { pipeline = pipe.EX; };    // Pipelined branch select register (Phase 7)
register bit[WORD_W]        r_ex_immed          { pipeline = pipe.EX; };    // Pipelined immediate Register

/* Execute Stage Signals */
signal bit[BRANCH_W]        s_ex_brimm;         // Immediate + PC adder output (Phase 7)
signal bit[ALUOP_W]         s_ex_alusrc1;       // ALU source 1 input signal (Phase 7)
signal bit[ALUOP_W]         s_ex_alusrc2;       // ALU source 2 input signal (Phase 7)
signal bit[ADDR_W]          s_ex_target_addr;   // Target address signal (Phase 7)
signal bit[FWDA_W]          s_ex_fwdA_sel;      // Forward control line Select A Signal (Phase 6)
signal bit[FWDB_W]          s_ex_fwdB_sel;      // Forward control line Select B Signal (Phase 6)
signal bit[WORD_W]          s_ex_fwdA_out;      // Forward control line Mux A Output Signal (Phase 6)
signal bit[WORD_W]          s_ex_fwdB_out;      // Forward control line Mux B Output Signal (Phase 6)
signal bit[WORD_W]          s_ex_aluout;        // ALU output (Phase 7)
signal bit[BOOLEAN_BIT]     s_ex_zero;          // ALU zero signal (Phase 7)
// -------------------------------------------------------------------------------------------------
// Memory stage
// -------------------------------------------------------------------------------------------------

/* Memory stage pipeline registers */
register bit[ADDR_W]        r_me_pc             { pipeline = pipe.ME; };    // Pipelined program counter register
register bit[INSTR_W]       r_me_instr          { pipeline = pipe.ME; };    // Pipelined instruction register
register bit[RF_XPR_W]      r_me_rd             { pipeline = pipe.ME; };    // Pipelined destination register
register bit[REGWRITE_W]    r_me_regwrite       { pipeline = pipe.ME; };    // Pipelined register write file Register
register bit[WORD_W]        r_me_alu            { pipeline = pipe.ME; };    // Pipelined ALU register
register bit[BRANCH_W]      r_me_brnchop        { pipeline = pipe.ME; };    // Pipelined branch operation register (Phase 7)
register bit[BOOLEAN_BIT]   r_me_zero           { pipeline = pipe.ME; };    // Pipelined ALU zero register (Phase 7)
register bit[ADDR_W]        r_me_target_addr    { pipeline = pipe.ME; };    // Pipelined target address register (Phase 7)
register bit[REGWRITE_W]    r_me_rfwt_sel       { pipeline = pipe.ME; };    // Pipelined register file select register (Phase 7)
register bit[ADDR_W]        r_me_bradd          { pipeline = pipe.ME; };    // Pipelined branch address (Phase 7)

signal bit[ADDR_W] s_me_pcsrc; // PC source (Phase 7)
// -------------------------------------------------------------------------------------------------
// Writeback stage
// -------------------------------------------------------------------------------------------------

/* Writeback stage pipeline registers */
register bit[ADDR_W]        r_wb_pc             { pipeline = pipe.WB; };    // Pipelined program counter register
register bit[INSTR_W]       r_wb_instr          { pipeline = pipe.WB; };    // Pipelined instruction register
register bit[RF_XPR_W]      r_wb_rd             { pipeline = pipe.WB; };    // Pipelined destination register
register bit[WORD_W]        r_wb_alu            { pipeline = pipe.WB; };    // Pipelined ALU register
register bit[REGWRITE_W]    r_wb_regwrite       { pipeline = pipe.WB; };    // Pipelined register write file register
register bit[WBSEL_W]       r_wb_rfwt_sel       { pipeline = pipe.WB; };    // Pipelined register file select register (Phase 7)
register bit[ADDR_W]        r_wb_target_addr    { pipeline = pipe.WB; };    // Pipelined target address register (Phase 7)

/* Writeback stage signals */
signal bit[ADDR_W] s_wb_pcadder;    // Writeback PC adder output (Phase 7)
signal bit[WORD_W] s_wb_result;     // Writeback result signal (Phase 7)

// -------------------------------------------------------------------------------------------------
// Pipeline control
// -------------------------------------------------------------------------------------------------
register bit[1] r_id_clear      {default = true;};

signal bit[1] s_if_stall;
signal bit[1] s_id_stall;
signal bit[1] s_id_clear;
signal bit[1] s_ex_stall;
signal bit[1] s_ex_clear;
signal bit[1] s_me_stall;
signal bit[1] s_me_clear;
signal bit[1] s_wb_stall;
signal bit[1] s_wb_clear;


// -------------------------------------------------------------------------------------------------
// SYSCALL support for simulation
// -------------------------------------------------------------------------------------------------
register bit[TWO_BIT]       r_syscall_delay     { default = 0; };
signal bit[BOOLEAN_BIT]     s_syscall_pending;
signal bit[BOOLEAN_BIT]     s_syscall_stall;


