/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  Execute stage - cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use ex_output;

    semantics
    {
        // HALT instruction detection
        if (r_ex_halt == HALT_HALT)
        {
            codasip_break();
            codasip_info(INFO_GENERAL, "Halt Instructions Indicated");
        }

        // Multiplexor
        switch(r_ex_alusrc2)
        {
            case ALU2_REG:
                s_ex_src2 = r_ex_reg2;
                break;
            case ALU2_IMM:
                s_ex_src2 = r_ex_immed;
                break;
            default:
                s_ex_src2 = 0;
                codasip_fatal(SRC2_ERROR, "Default case EX_Multiplexr: %d\n", r_ex_alusrc2);
                break;
        }

        // ALU Component
        switch(r_ex_aluop)
        {
            case ALU_NOP:
                s_ex_alu = 0;
                break;
            case ALU_ADD:
                s_ex_alu = r_ex_reg1 + s_ex_src2;
                break;
            default:
                s_ex_alu = 0;
                codasip_fatal(ALU_ERROR, "Default case EX_ALU: %d\n", r_ex_aluop);
                break;
        }

        // Forward Control Select1
        if((r_ex_rs1 == r_me_rd) && (r_me_rd != 0) && (r_me_regwrite))
        {
            s_ex_fwdA_sel = FWDA_ALU_ME;
        }
        else if ((r_ex_rs1 == r_wb_rd) && (r_wb_rd != 0) && (r_wb_regwrite))
        {
            s_ex_fwdA_sel = FWDA_DATA_WB;
        }
        else 
        {
            s_ex_fwdA_sel = FWDA_SRC1;
        }
        
        // Forward Control Select2
        if ((r_ex_rs2 == r_me_rd) && (r_me_rd != 0) && (r_me_regwrite))
        {
            s_ex_fwdB_sel = FWDB_ALU_ME;
        }
        else if ((r_ex_rs2 == r_wb_rd) && (r_wb_rd != 0) && (r_wb_regwrite))
        {
            s_ex_fwdB_sel = FWDB_DATA_WB;
        }
        else 
        {
            s_ex_fwdB_sel = FWDB_SRC2;
        }


        // Forward Control Mux Output A
        switch(s_ex_fwdA_sel)
        {
            case FWDA_SRC1:
                s_ex_fwdA_out = r_ex_src1;
                break;
            case FWDA_ME:
                s_ex_fwdA_out = r_me_alu;
                break;
            case FWDA_WB:
                s_ex_fwdA_out = r_wb_alu;
                break;
            default:
                s_ex_fwdA_out = 0;
                // codasip_fatal(ALU_ERROR, "Default case EX_FWDA Multiplexor: %d\n", s_ex_fwdA_sel);
                break;
        }

        // Forward Control Mux Output B
        switch(s_ex_fwdB_sel)
        {
            case FWDB_SRC2:
                s_ex_fwdB_out = r_ex_src2;
                break;
            case FWDB_ME:
                s_ex_fwdB_out = r_me_alu;
                break;
            case FWDB_WB:
                s_ex_fwdB_out = r_wb_alu;
                break;
            default:
                s_ex_fwdB_out = 0;
                // codasip_fatal(ALU_ERROR, "Default case EX_FWDB Multiplexor: %d\n", s_ex_fwdB_sel);
                break;
        }

        // Timing
        ex_output();
    };
};

event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        r_me_pc         = r_ex_pc;
        r_me_instr      = r_ex_instr;
        r_me_rd         = r_ex_rd;
        r_me_regwrite   = r_ex_regwrite;
        r_me_alu        = s_ex_alu;
    };
};
