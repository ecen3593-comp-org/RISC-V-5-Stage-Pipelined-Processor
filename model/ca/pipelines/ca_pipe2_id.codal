/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe2_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "config.hcodal"
#include "ca_defines.hcodal"

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

event id : pipeline(pipe.ID)
{
    use dec;
    use id_output;

    semantics
    {
        uint32 id_instr_temp;
        bool cache_ready, cache_response;

        if_code.transport(CP_PHS_DATA, cache_ready, cache_response, id_instr_temp);

        s_id_instr = r_id_clear ? NOP_INSTRUCTION : id_instr_temp;

        // Opcode
        // NOTE: '..' indicates extracted bits from a bitfield
        //       '::' indicates concatenation of fields to a signal field
        s_id_opc = s_id_instr [31..25] :: s_id_instr [14..12] :: s_id_instr [6..0];
        
        // First source register
        s_id_rs1 = s_id_instr [19..15];
        
        // Second source register
        s_id_rs2 = s_id_instr [24..20];
        
        // Destination register
        s_id_rd = s_id_instr [11..7];
        
        // Immediate decode
        // Extracts 12-bits from s_id_inst, casts it to a signed 12-bit int,
        // then sign extends it to 32-bits
        s_id_immed = (int32)(int12)s_id_instr [31..20]; // I- type immediate

        // Read input register(s) from the Register File (rf_xpr)
        // NOTE: The register file is essentially an array of 32x 32-bit registers
        s_id_reg1 = rf_xpr.src1[s_id_rs1];
        s_id_reg2 = rf_xpr.src2[s_id_rs2];

        // Set local stall.
        s_id_stall = 0;

        // RFF1 control
        if ((r_wb_rd == s_id_src1) && (r_wb_rd != 0) && (r_wb_regwrite))
        {
            s_id_rff1_sel = RF1_ID;
        }
        else
        {
            s_id_rff1_sel = ALU1_WB;
        }
            
        // RFF2 control
        if ((r_wb_rd == s_id_src2) && (r_wb_rd != 0) && (r_wb_regwrite))
        {
            s_id_rff2_sel = RF2_ID;
        }
        else
        {
            s_id_rff2_sel = ALU2_WB;
        }
    
        switch (s_id_rff1_sel)
        {
            case RF1_ID:
                s_id_src1 = r_wb_alu;
                break;

            case ALU1_WB:
                s_id_src1 = s_id_reg1;
                break;
            default:
                s_id_src1 = 0;
                // codasip_fatal(SRC2_ERROR, "Default case S_ID_SRC1: %d\n", s_id_rff1_sel);
                break;
        }

        switch (s_id_rff2_sel)
        {
            case RF2_ID:
                s_id_src2 = r_wb_alu;
                break;

            case ALU2_WB:
                s_id_src2 = s_id_reg2;
                break;
            default:
                s_id_src2 = 0;
                // codasip_fatal(SRC2_ERROR, "Default case S_ID_SRC2: %d\n", s_id_rff2_sel);
                break;
        }

        // Decoder activation
        dec(s_id_opc);

        // Update the registers
        id_output();
    };
};
event id_output : pipeline(pipe.ID)
{

    semantics
    {
        // -----------------------------------------------------------------------------------------
        // Pipeline output
        // -----------------------------------------------------------------------------------------
        r_ex_pc         = r_id_pc;
        r_ex_instr      = s_id_instr;
        r_ex_rd         = s_id_rd;
        r_ex_reg1       = s_id_reg1;
        r_ex_reg2       = s_id_reg2;
        r_ex_aluop      = s_id_aluop;
        r_ex_alusrc2    = s_id_alusrc2;
        r_ex_regwrite   = s_id_regwrite;
        r_ex_halt       = s_id_halt;
        r_ex_immed      = s_id_immed;
        r_ex_src1       = s_id_src1;    // New pipelined register (Phase 6)
        r_ex_src2       = s_id_src2;    // New pipelined register (Phase 6)
        r_ex_rs1        = s_id_rs1;     // New pipelined register (Phase 6)
        r_ex_rs2        = s_id_rs2;     // New pipelined register (Phase 6)
    };
};
